version: 2 # CircleCI의 언어 버전
jobs: # 작업 목록
  test:
    working_directory: ~/girl-landing # 작업이 수행될 디렉토리
    docker: # 해당 job을 어디서 수행할 것인지에 대한 구성.
      - image: circleci/node:13.7 # 라는 도커 이미지를 사용하여 도커 컨테이너에서 빌드작업을 수행한다. (/node 버전)
    steps: # 배포할 때 사용할 스크립트를 step 별로 실행하게 된다. (작업의 순서)
      - checkout # workflow 에서 트리거된 git branch 를 checkout 한다.
      - attach_workspace: # 지정한 workspace 를 attach 해준다. (서클씨아이에 올려준다)
          at: ~/girl-landing
      - run: # command 에 지정된 명령어 수행. 여기서는 npm 업데이트를 한다.
          name: npm 업데이트
          command: sudo npm install -g npm@6.1.0
      - restore_cache: # keys 로 지정된 키로 캐시에 저장된 내용을 복구한다.
          # 설치된 아이들의 대한 의존성. 현재 설치된 것에 대한 저장(캐싱)
          keys:
            - v1-dependencies-{{ .Branch }}-{{ checksum "package.json" }}
            # checksum "package.json" 이란 해당 파일의 현상태를 체크할 수 있는 명령어
            - v1-dependencies-{{ .Branch }}-
      - run: # npm 설치
          name: npm 설치
          command: npm install
      - save_cache: # key 에 지정된 키로 paths 에 명시된 경로의 내용을 캐시에 저장한다.
          key: v1-dependencies-{{ .Branch }}-{{ checksum "package.json" }}
          paths:
            - node_modules
      - run: # npm 테스트
          name: npm 테스트
          command: npm test

  build:
    working_directory: ~/girl-landing
    docker:
      - image: circleci/node:13.7
    steps:
      - checkout
      - attach_workspace:
          at: ~/girl-landing
      - run:
          name: npm 업데이트
          command: sudo npm install -g npm@6.1.0
      - restore_cache:
          keys:
            - v1-dependencies-{{ .Branch }}-{{ checksum "package.json" }}
            - v1-dependencies-{{ .Branch }}-
      - run:
          name: npm 설치
          command: npm install
      - save_cache:
          key: v1-dependencies-{{ .Branch }}-{{ checksum "package.json" }}
          paths:
            - node_modules
      - run:
          name: Build in Development Mode
          command: npm run build
      # workflow 를 이용해서 job 을 나누게 되면 각각의 job 은 격리된 상태이므로 다른 job 에서 생성한 파일은 보이지 않는다. (서로 공유안됨)
      # 각 job 마다 매번 checkout 을 정의하는 것은 비효율적이므로 persist_to_workspace 라는 옵션을 이용하여 job 간에 파일을 공유할 수 있게 해준다.
      # 다음 job 에서 docker 이미지를 사용 할 수 있도록 workspace 에 저장해둔다.
      - persist_to_workspace:
          root: .
          paths: dist # 공유할 패스를 명시
      - run: # 해당 디렉토리 파일을 확인
          name: check dist directory
          command: pwd; ls; ls dist

  deploy:
    working_directory: ~/girl-landing # 작업이 수행될 디렉토리
    docker: # 해당 job을 어디서 수행할 것인지에 대한 구성.
        - image: circleci/node:13.7 # 라는 도커 이미지를 사용하여 도커 컨테이너에서 빌드작업을 수행한다. (/node 버전)
    steps: # 배포할 때 사용할 스크립트를 step 별로 실행하게 된다. (작업의 순서)
      - checkout
      - attach_workspace:
          at: ~/girl-landing
      - run:
          name: npm 업데이트
          command: sudo npm install -g npm@6.1.0
      - restore_cache:
          keys:
            - v1-dependencies-{{ .Branch }}-{{ checksum "package.json" }}
            - v1-dependencies-{{ .Branch }}-
      - run:
          name: npm 설치
          command: npm install
      - save_cache:
          key: v1-dependencies-{{ .Branch }}-{{ checksum "package.json" }}
          paths:
            - node_modules
      - run:
          name: Dev Firebase Deploy
          command:  ./node_modules/.bin/firebase deploy --only hosting:fomes-landing-dev --token "$DEV_FIREBASE_TOKEN"

# Workflow 는 CircleCI 에서 수행되는 모든 작업을 조율하는 설정키워드이다.
# 각 workflow 는 설정파일 내에 고유한 이름으로 구성되어야 하며,
# 해당 workflow 의 이름을 키로, 수행할 내용을 해당 workflow 의 값으로 구성된다.
workflows:
  version: 2
  chacha: # Workflow 이름
    jobs:
#      - test
      - build
      - deploy: # deploy job은 build가 끝난뒤에 실행한다.
          requires:
            - build
